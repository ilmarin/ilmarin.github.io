<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Разное on Илья Маринин</title>
    <link>https://www.marinin.pw/ru/tags/%D1%80%D0%B0%D0%B7%D0%BD%D0%BE%D0%B5/</link>
    <description>Recent content in Разное on Илья Маринин</description>
    <generator>Hugo -- 0.138.0</generator>
    <language>ru-RU</language>
    <lastBuildDate>Sun, 21 Jan 2018 20:12:54 +0500</lastBuildDate>
    <atom:link href="https://www.marinin.pw/ru/tags/%D1%80%D0%B0%D0%B7%D0%BD%D0%BE%D0%B5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Подключение жестких дисков при старте системы в Ubuntu</title>
      <link>https://www.marinin.pw/ru/posts/mount-on-startup/</link>
      <pubDate>Sun, 21 Jan 2018 20:12:54 +0500</pubDate>
      <guid>https://www.marinin.pw/ru/posts/mount-on-startup/</guid>
      <description>&lt;p&gt;По этому поводу есть подробный &lt;a href=&#34;https://help.ubuntu.com/community/Fstab&#34;&gt;мануал на сайте Ubuntu&lt;/a&gt;. Ниже короткая выжимка на его основе. Плюс данного способа в том, что нет привязки к типу графической оболочки.&lt;/p&gt;
&lt;p&gt;Открываем консоль и узнаем UUID интересующего устройства и тип его файловой системы:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo blkid
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;В моем случае это жесткий диск с файловой системой ntfs.&lt;/p&gt;
&lt;p&gt;Создаем точку монтирования:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo mkdir /media/trash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Далее открываем &lt;code&gt;/etc/fstab&lt;/code&gt;, сделав резервную копию:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo nano -Bw /etc/fstab
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;В файл прописываем что-то вроде:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>По этому поводу есть подробный <a href="https://help.ubuntu.com/community/Fstab">мануал на сайте Ubuntu</a>. Ниже короткая выжимка на его основе. Плюс данного способа в том, что нет привязки к типу графической оболочки.</p>
<p>Открываем консоль и узнаем UUID интересующего устройства и тип его файловой системы:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo blkid
</span></span></code></pre></div><p>В моем случае это жесткий диск с файловой системой ntfs.</p>
<p>Создаем точку монтирования:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo mkdir /media/trash
</span></span></code></pre></div><p>Далее открываем <code>/etc/fstab</code>, сделав резервную копию:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo nano -Bw /etc/fstab
</span></span></code></pre></div><p>В файл прописываем что-то вроде:</p>
<pre tabindex="0"><code>UUID=XXXXXXXXXXX /media/trash ntfs-3g 0 0
</code></pre><p>Столбцы слева направо: UUID устройства, точка монтирования, тип файловой системы, настройки резервного копирования, настройки проверки файловой системы.</p>
<p>Сохраняем изменения и монтируем все что прописано в <code>fstab</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo mount -a
</span></span></code></pre></div><p>Теперь при старте системы раздел будет автоматически смонтирован в <code>/media/trash</code>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Скрытие рекомендаций YouTube при просмотре видео</title>
      <link>https://www.marinin.pw/ru/posts/distraction-free-youtube/</link>
      <pubDate>Wed, 03 Jan 2018 20:39:35 +0500</pubDate>
      <guid>https://www.marinin.pw/ru/posts/distraction-free-youtube/</guid>
      <description>&lt;p&gt;C недавних пор заменил Chrome на Firefox. Для первого есть отличное расширение Distraction Free Youtube, которое позволяет скрывать рекомендации YouTube при просмотре видео, чтобы меньше отвлекаться :).&lt;/p&gt;
&lt;p&gt;Аналога для Firefox найти не смог, а писать собственное расширение лень. В итоге ограничился написанием скрипта для Greasemonkey. Забрать можно &lt;a href=&#34;https://gist.github.com/ilmarin/6fcc8dc0cab2b193640488b6b133b32c/raw/f83fb234695ecc88dbe5dc818b7ee5b92a8d196d/distraction-free-youtube.user.js&#34;&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Скрипт работает только на странице просмотра видео и скрывает панель с рекомендациями в правой части экрана.&lt;/p&gt;
&lt;p&gt;Если у кого-то есть предложения по доработке, пишите.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>C недавних пор заменил Chrome на Firefox. Для первого есть отличное расширение Distraction Free Youtube, которое позволяет скрывать рекомендации YouTube при просмотре видео, чтобы меньше отвлекаться :).</p>
<p>Аналога для Firefox найти не смог, а писать собственное расширение лень. В итоге ограничился написанием скрипта для Greasemonkey. Забрать можно <a href="https://gist.github.com/ilmarin/6fcc8dc0cab2b193640488b6b133b32c/raw/f83fb234695ecc88dbe5dc818b7ee5b92a8d196d/distraction-free-youtube.user.js">здесь</a>.</p>
<p>Скрипт работает только на странице просмотра видео и скрывает панель с рекомендациями в правой части экрана.</p>
<p>Если у кого-то есть предложения по доработке, пишите.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Про рефакторинг</title>
      <link>https://www.marinin.pw/ru/posts/about_refactoring/</link>
      <pubDate>Sun, 23 Jul 2017 17:08:51 +0500</pubDate>
      <guid>https://www.marinin.pw/ru/posts/about_refactoring/</guid>
      <description>&lt;p&gt;Никто не любит плохо написанные программные продукты. Огромное количество сильно связанного, ригидного кода из которого состоит большинство проектов. Особенно плачевная ситуация там, где мало внимания уделяется тестированию в пользу внедрения новых фич в результате чего накапливается технический долг. Часто в таких условиях тяжело себя мотивировать на изменение ситуации. Мне помогает подход пропагандируемый Бобом Мартином, который выражается в правиле бойскаута:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Оставь место стоянки чище, чем оно было до твоего прихода.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;У многих программистов есть мнение, что рефакторинг это что-то объемное, на что нужно регулярно выделять отдельный большой кусок времени (которого нет, так как с новой неделей уже нужно внедрять новые фичи). В итоге долг растет (как и количество ошибок), ничего не предпринимается и все демотивированы. Хотя, именно регулярные маленькие изменения часто вносят решающий вклад. Что-то вроде ныне модного &lt;em&gt;кайдзен&lt;/em&gt;. При выполнении задачи всегда можно сделать чуть больше и добавить коду гибкости.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Никто не любит плохо написанные программные продукты. Огромное количество сильно связанного, ригидного кода из которого состоит большинство проектов. Особенно плачевная ситуация там, где мало внимания уделяется тестированию в пользу внедрения новых фич в результате чего накапливается технический долг. Часто в таких условиях тяжело себя мотивировать на изменение ситуации. Мне помогает подход пропагандируемый Бобом Мартином, который выражается в правиле бойскаута:</p>
<blockquote>
<p>Оставь место стоянки чище, чем оно было до твоего прихода.</p>
</blockquote>
<p>У многих программистов есть мнение, что рефакторинг это что-то объемное, на что нужно регулярно выделять отдельный большой кусок времени (которого нет, так как с новой неделей уже нужно внедрять новые фичи). В итоге долг растет (как и количество ошибок), ничего не предпринимается и все демотивированы. Хотя, именно регулярные маленькие изменения часто вносят решающий вклад. Что-то вроде ныне модного <em>кайдзен</em>. При выполнении задачи всегда можно сделать чуть больше и добавить коду гибкости.</p>
<p>При этом важно ничего не сломать. Помогает простой алгоритм:</p>
<ol>
<li>Удостовериться, что функционал работает (написать автотесты);</li>
<li>Произвести мелкие улучшения;</li>
<li>Проверить, что ничего не сломалось.</li>
</ol>
<p>В идеальном мире перед тем как применять алгоритм выше, следует предпринять меры к тому чтобы бардак не накапливался. Однако никто не мешает начать с малого и сделать код проще без вероятности его сломать. Скорее всего можно:</p>
<ol>
<li>Переименовать методы и классы в более семантичные;</li>
<li>Уменьшить связность в коде;</li>
<li>Написать комментарии там где их нет, чтобы другим программистам в будущем было проще;</li>
<li>Побить классы на более мелкие по принципу единственной ответственности;</li>
<li>Вынести повторяющийся код в отдельные методы;</li>
<li>Просто описать какой-то модуль или код в документации;</li>
<li>Удалить неиспользуемый код.</li>
</ol>
<p>Тем кто хочет встать на нелегкий путь борьбы с бардаком полезно полистать такие книги как &ldquo;Чистый код&rdquo; Боба Мартина, &ldquo;Совершенный код&rdquo; Стива Макконнелла. Если читать много лень, то есть куча ресурсов с описанием таких популярных концепций как DRY, SOLID, GRASP, KISS, YAGNI. Этого вполне хватит на первых порах.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Заработок и влияние для программиста</title>
      <link>https://www.marinin.pw/ru/posts/earnings_and_influence/</link>
      <pubDate>Sun, 21 May 2017 12:28:19 +0500</pubDate>
      <guid>https://www.marinin.pw/ru/posts/earnings_and_influence/</guid>
      <description>&lt;p&gt;Программист создает новую информацию и получает за это деньги. Особенность труда программиста в том, что в идеале он пишет код один раз, а потом этот код работает годами и приносит ценность.&lt;/p&gt;
&lt;p&gt;Плохая новость в том, что обычно на работе весь заработок программиста ограничивается зарплатой, хотя компания извлекает прибыль из его кода множество раз. Порой годами. Хорошая новость: никто не мешает программисту работать на себя и снимать все сливки. Очевидные варианты по созданию своей компании/стартапа я здесь не рассматриваю, а беру за основу факт наличия у программиста основной работы.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Программист создает новую информацию и получает за это деньги. Особенность труда программиста в том, что в идеале он пишет код один раз, а потом этот код работает годами и приносит ценность.</p>
<p>Плохая новость в том, что обычно на работе весь заработок программиста ограничивается зарплатой, хотя компания извлекает прибыль из его кода множество раз. Порой годами. Хорошая новость: никто не мешает программисту работать на себя и снимать все сливки. Очевидные варианты по созданию своей компании/стартапа я здесь не рассматриваю, а беру за основу факт наличия у программиста основной работы.</p>
<p>Какие способы капитализации труда программиста вижу я:</p>
<ul>
<li><strong>Написание и продажа своих скриптов, приложений, сервисов с подпиской и т.д.</strong> Самый трудный вариант. Во-первых, нужно умело выявить проблему или потребность. Затем нужно тщательно разработать тему, дать людям ценность и заработать на этом деньги. Дальнейшая детализация процесса - тема множества статей.</li>
<li><strong>Мобильные приложения.</strong> Вынес отдельно от первого пункта из-за популярности этого направления. Стоит помнить несколько вещей. Во-первых, рынок мобильных приложений весьма насыщен и пробиться без рекламного бюджета совсем непросто. Во-вторых, по статистике пользователи iOS примерно в пять раз более щедры, чем Android пользователи. Это если хочется сделать платное приложение. В-третьих, с мотивацией быстро заработать малыми усилиями лезть сюда не стоит: может постигнуть жестокое разочарование.</li>
<li><strong>Создание игр.</strong> С распространением цифровой дистрибьюции многие начали делать игры. Тема игр весьма обширна и требует от программиста немалого объема специфических знаний. Опыт многих indie-разработчиков показывает: чтобы сделать игру, которая понравится многим, нужно самому быть фанатом игр с большим стажем и быть готовым работать на энтузиазме годами до первого коммерческого успеха. Риск высок, порог вхождения тоже.</li>
<li><strong>Блог или канал на YouTube.</strong> Блог повышает твою ценность как профессионала. Люди видят, что ты любишь то что делаешь. Это подкупает. Люди читают статьи, узнают больше о тебе и твоих умениях. Видеоблог требует больше времени и вложений. Штатив с камерой как минимум, но на первом этапе можно вести запись прямо со своего MacBook. Хороший контент помогает собрать преданную аудиторию и повысить свою узнаваемость.</li>
<li><strong>Оптимизация своего труда.</strong> Имеется в виду свой набор библиотек, скриптов и приемов, помогающих зарабатывать больше денег меньшими усилиями. Если ты программируешь давно, то у тебя наверняка есть свой &ldquo;ящик с инструментами&rdquo;, который сильно повышает твою продуктивность.</li>
<li><strong>Фриланс</strong>. Поможет найти новые связи и клиентов. Я думаю, что делать ставку только на фриланс не нужно. Придется искать заказы и зависеть от притока денег с них, а это лишний стресс. Более выгодна консервативная стратегия: неплохие деньги на работе плюс подработка на фрилансе в свободное время. То что Нассим Талеб назвал &ldquo;стратегией штанги&rdquo;. В итоге имеем некоторый заработок, набиваем портфолио, но при этом не испытывам стресс из-за вынужденного поиска заказов. Плюс не страдает социализация. Общение с другими программистами, опыт работы в команде различных людей и разрешения конфликтов очень важен, а его фриланс в своей самой распространенной форме либо не дает вовсе, либо дает недостаточно.</li>
<li><strong>Создание курсов по какой-либо технологии.</strong> Требуется экспертиза в технологии и личное время. Отличная мотивация выучить новую &ldquo;горячую&rdquo; технологию или закрыть пробелы в знаниях по технологии уже известной. Минус в большой конкуренции, если выходить на глобальный рынок. В России, как всегда, поле непаханное и можно делать курсы почти на любую тему. Стоит рассмотреть вариант с размещением курсов сразу на нескольких обучающих ресурсах.</li>
<li><strong>Написание книги по технологии</strong>. Технология должна быть относительно новая, либо твой взгляд на нее и подход к обучению должны выделяться. Способ требует массы времени. Если пишешь на английском, хороший стимул для лучшего освоения языка. Кроме того так ты расширяешь рынок сбыта своей книги.</li>
</ul>
<p>Кроме заработка программисту важно оказывать влияние на индустрию и быть заметным в сообществе. Для этого полезны следующие вещи:</p>
<ul>
<li><strong>Посещение конференций и неформальных собраний.</strong> Я не случайно поставил этот пункт на первое место. Если такие собрания есть в твоем городе или в компании, стоит обязательно поприсутствовать, а еще лучше подготовить доклад. Хотя бы для того чтобы знать своих ближайших коллег, а они знали тебя.</li>
<li><strong>Участие в open-source.</strong> Самый простой вариант, который позволяет стать заметной фигурой в мировом сообществе. Можно стартовать свой проект, а можно присоедениться к уже существующему. Позволяет многому научиться и пополнить резюме как минимум.</li>
<li><strong>Написание статей в блог, создание книг и курсов.</strong> Внезапно. Если владеешь английским, то совсем хорошо.</li>
<li><strong>Участие в соц. сетях</strong>. У многих it-специалистов популярен твиттер, все крутые ребята там.</li>
<li><strong>Помощь и ответы на вопросы других программистов.</strong> Помогает углублять и шлифовать знания по технологии плюс удовлетворение от помощи другим. Найти специализированные ресурсы не составит труда. Например, Тостер в РФ и StackOverflow в остальном мире.</li>
</ul>
<p>А какие варианты капитализации труда или оказания влияния знаете вы?</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
