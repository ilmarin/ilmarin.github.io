<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Илья Маринин</title>
    <link>https://www.marinin.pw/</link>
    <description>Recent content on Илья Маринин</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <lastBuildDate>Sat, 21 Mar 2020 17:19:07 +0300</lastBuildDate>
    
	<atom:link href="https://www.marinin.pw/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Добавление новых php-расширений в Homestead</title>
      <link>https://www.marinin.pw/post/homestead_extend/</link>
      <pubDate>Sat, 21 Mar 2020 17:19:07 +0300</pubDate>
      
      <guid>https://www.marinin.pw/post/homestead_extend/</guid>
      <description>Homestead &amp;mdash; это набор конфигов от Laravel виртуальной машины на базе Vagrant.
Новичкам иногда сложно сходу добавить новый функционал в виртуальную машину на базе Homestead.
Для примера дан простой набор шагов по добавлению php-расширения APCu в Homestead. Оно используется, например, в Symfony.
Настраиваем Homestead Находим в папке с Homestead файл after.sh и добавляем нужные строки:
#Install APCu sudo apt-get -y \ -o Dpkg::Options::=&amp;quot;--force-confdef&amp;quot; \ -o Dpkg::Options::=&amp;quot;--force-confold&amp;quot; \ install php-apcu  Пересобираем виртуальную машину В терминале в папке с Homestead выполянем:</description>
    </item>
    
    <item>
      <title>CodeLobster IDE – бесплатный PHP, HTML, CSS, JavaScript редактор</title>
      <link>https://www.marinin.pw/post/codelobster/</link>
      <pubDate>Wed, 30 Jan 2019 17:53:19 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/codelobster/</guid>
      <description>Текст ниже носит рекламный характер.
В этой статье мы рассмотрим бесплатный кросс-платформенный редактор для веб- разработки - CodeLobster IDE. Он уже долгое время присутствует на рынке и завоевал очень большое количество пользователей.
CodeLobster IDE предназначен для редактирования PHP, HTML, CSS и JavaScript файлов. Он подсвечивает код в зависимости от синтаксиса, показывает подсказки для тэгов, функций и их параметров. Этот редактор очень хорошо работает со смешанным кодом.
Если Вы вставите РНР код в какой-нибудь HTML шаблон, то редактор корректно подсветит и HTML и PHP части, то же самое будет со вставками CSS и JavaScript кода.</description>
    </item>
    
    <item>
      <title>Как связать два docker-контейнера</title>
      <link>https://www.marinin.pw/post/docker-network/</link>
      <pubDate>Tue, 27 Feb 2018 15:54:49 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/docker-network/</guid>
      <description>Порой при разработке возникает необходимость связать два ранее не связанных контейнера в одну сеть, чтобы быстро что-то протестировать. При этом не хочется писать новые файлы конфигурации.
Для этого в docker есть функционал по работе с сетью &amp;mdash; docker network.
Например, из контейнера app мы хотим получить доступ к контейнеру service по имени, чтобы осуществить вызов API.
Пишем:
$ docker network create -d bridge api $ docker network connect --alias app api 53 $ docker network connect --alias service api 4с  Первая команда создает новую сеть.</description>
    </item>
    
    <item>
      <title>Допиливание Vim</title>
      <link>https://www.marinin.pw/post/healthy-vim/</link>
      <pubDate>Wed, 31 Jan 2018 11:52:02 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/healthy-vim/</guid>
      <description>Vim &amp;mdash; отличный редактор, позволяющий очень быстро выполнять рутинные операции с текстом. Однако для комфортной работы Vim требует базовой настройки и периода привыкания. В данной заметке я приведу список изменений, которые позволят комфортно использовать Vim для любых операций, а не только для редактирования различных файлов настроек.
Перечень тем:
 создание файла настроек .vimrc; установка менеджера плагинов; корректная работа с переключение раскладки; установка набора сниппетов для более быстрого редактирования кода и разметки; добавление проверки орфографии; применение темы оформления; корректный перенос текста.</description>
    </item>
    
    <item>
      <title>Отладка кода в docker-контейнере из NetBeans</title>
      <link>https://www.marinin.pw/post/netbeans-docker-xdebug/</link>
      <pubDate>Sat, 27 Jan 2018 20:36:21 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/netbeans-docker-xdebug/</guid>
      <description>Я уже немного писал о NetBeans тут . Данная IDE умеет хорошо дружить с Xdebug, в связке с которым очень удобно отлаживать php-код. Основы успешно описаны, например, здесь.
Все интереснее, когда код приходится отлаживать не на локальной машине, а внутри docker-контейнера. Особенно, если нужно отладить cli-скрипт внутри контейнера.
Для успешной отладки следует:
 Настроить docker-контейнер с Xdebug внутри; Настроить Xdebug внутри контейнера; Настроить NetBeans.  При обычной отладке с использованием браузера и при отладке cli-скрипта настройки будут слегка отличаться.</description>
    </item>
    
    <item>
      <title>Подключение жестких дисков при старте системы в Ubuntu</title>
      <link>https://www.marinin.pw/post/mount-on-startup/</link>
      <pubDate>Sun, 21 Jan 2018 20:12:54 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/mount-on-startup/</guid>
      <description>По этому поводу есть подробный мануал на сайте Ubuntu. Ниже короткая выжимка на его основе. Плюс данного способа в том, что нет привязки к типу графической оболочки.
Открываем консоль и узнаем UUID интересующего устройства и тип его файловой системы:
$ sudo blkid  В моем случае это жесткий диск с файловой системой ntfs.
Создаем точку монтирования:
$ sudo mkdir /media/trash  Далее открываем /etc/fstab, сделав резервную копию:
$ sudo nano -Bw /etc/fstab  В файл прописываем что-то вроде:</description>
    </item>
    
    <item>
      <title>Реализация RESTful API в Yii2</title>
      <link>https://www.marinin.pw/post/yii2-rest/</link>
      <pubDate>Sun, 07 Jan 2018 15:40:09 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/yii2-rest/</guid>
      <description>Yii2 из коробки предоставляет удобный фреймворк для построения REST API вашего сервиса. Ниже я опишу как быстро начать его использовать.
Предварительная настройка Для начала работы достаточно базового шаблона Yii2. Создание проекта и настройку виртуального хоста я описывать не буду и перейду сразу к настройке REST.
После скачивания проекта настроим компоненту user в файле web.php. Добавим туда следующие строки:
&#39;enableSession&#39; =&amp;gt; false, &#39;loginUrl&#39; =&amp;gt; null,  Первая строка отключает сохранение состояния пользователя на сервере: одно из требований архитектуры REST.</description>
    </item>
    
    <item>
      <title>Обзор книги «В работу с головой»</title>
      <link>https://www.marinin.pw/post/deep-work/</link>
      <pubDate>Sat, 06 Jan 2018 14:05:04 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/deep-work/</guid>
      <description>В прошлом посте обозревал книгу «Хватит мечтать, займись делом!». Теперь настало время для другой книги того же автора &amp;mdash; «В работу с головой» (в оригинале «Deep Work: Rules for Focused Success in a Distracted World»).
В книге поднимается тема, знакомая многим работникам умственного труда: как делать больше сложной работы сосредоточенно и не отвлекаться на разную побочную деятельность.
Углубленная работа &amp;mdash; путь к успеху Основная мысль: в эпоху повсеместного проникновения социальных сетей и войны корпораций за внимание потребителя, все больше ценятся люди, способные к сложной сосредоточенной деятельности.</description>
    </item>
    
    <item>
      <title>Обзор книги «Хватит мечтать, займись делом!»</title>
      <link>https://www.marinin.pw/post/so-good-they-cant-ignore-you/</link>
      <pubDate>Thu, 04 Jan 2018 19:55:04 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/so-good-they-cant-ignore-you/</guid>
      <description>С праздниками осовободилось время на чтение, к чему незамедлительно приступил. На книгу &amp;laquo;Хватит мечтать, займись делом!&amp;raquo; (в оригинале &amp;laquo;So Good They Can&amp;rsquo;t Ignore You&amp;raquo;) наткнулся отчасти случайно по ссылкам на нее из другой книги автора и ряда других книг. Если бы не знал, что за автор написал книгу и не слышал о ней раньше, не открыл бы. Заголовок, выдуманный нашим издателем, сильно напоминает &amp;ldquo;еще одну книгу на тему мотивации&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Скрытие рекомендаций YouTube при просмотре видео</title>
      <link>https://www.marinin.pw/post/distraction-free-youtube/</link>
      <pubDate>Wed, 03 Jan 2018 20:39:35 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/distraction-free-youtube/</guid>
      <description>C недавних пор заменил Chrome на Firefox. Для первого есть отличное расширение Distraction Free Youtube, которое позволяет скрывать рекомендации YouTube при просмотре видео (чтобы меньше отвлекаться :)).
Аналога для Firefox найти не смог, а писать собственное расширение лень. В итоге ограничился написанием скрипта для Greasemonkey. Забрать можно здесь.
Скрипт работает только на странице просмотра видео и скрывает панель с рекомендациями в правой части экрана.
Если у кого-то есть предложения по доработке, пишите.</description>
    </item>
    
    <item>
      <title>Добавление тегов к постам в Hugo</title>
      <link>https://www.marinin.pw/post/hugo_tags/</link>
      <pubDate>Sat, 25 Nov 2017 10:00:24 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/hugo_tags/</guid>
      <description>Hugo - генератор статических сайтов на Go, который я испольую для ведения блога. Как начать с ним работать я уже писал здесь.
Ниже я опишу как добавить к постам теги.
Первым делом следует дополнить config-файл в корне проекта (в моем случае config.toml) следующим содержимым:
[taxonomies] tag = &amp;quot;tags&amp;quot;  Для YAML-конфига соответственно нужно написать:
taxonomies: tag: &amp;quot;tags&amp;quot;  Теперь мы можем добавить теги к постам. Открываем любой из постов и в верхней части, ограниченной символами +++, пишем:</description>
    </item>
    
    <item>
      <title>Примитивный скрипт закачки файлов на сервер</title>
      <link>https://www.marinin.pw/post/simple_deploy/</link>
      <pubDate>Sat, 18 Nov 2017 23:30:13 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/simple_deploy/</guid>
      <description>Очень лень закачивать блог на сервер, тыкая в GUI FileZilla.
После некоторого гугления получился такой код:
#/bin/bash HOST=&#39;hostname&#39; USER=&#39;username&#39; PASSWD=&#39;password&#39; LOCALPATH=&#39;/path_to_my_local_folder&#39; DIR=&#39;/path_to_my_server_folder&#39; sshpass -p &amp;quot;$PASSWD&amp;quot; scp -r $LOCALPATH $USER@$HOST:$DIR  Не забываем дать скрипту права на исполнение:
$ chmod +x ./deploy.sh  Скрипт рекурсивно закачивает указанную папку на сервер. Если настроить ключи (что мне пока делать лень), то можно обойтись без sshpass и пароля соответственно.
Свой блог теперь закачиваю на сервер именно таким образом.</description>
    </item>
    
    <item>
      <title>Основы PHP_CodeSniffer</title>
      <link>https://www.marinin.pw/post/php_code_sniffer/</link>
      <pubDate>Sat, 18 Nov 2017 20:59:11 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/php_code_sniffer/</guid>
      <description>В некоторых компаниях есть большая база долгоиграющих и постоянно изменяющихся проектов. Без неусыпного контроля база кода рискует превратиться в месиво из малочитаемых файлов. Вручную проверять код на соответствие стандартам занятие достаточно утомительное. Быстро появляется потребность в атоматизации процесса.
PHP_CodeSniffer - это инструмент для проверки кода на соответствие принятым соглашениям и (в некоторых случаях) автоматического его исправления после проверки.
Установка и запуск В самом простом случае можно выполнить такой код в папке с исходниками проекта:</description>
    </item>
    
    <item>
      <title>Про рефакторинг</title>
      <link>https://www.marinin.pw/post/about_refactoring/</link>
      <pubDate>Sun, 23 Jul 2017 17:08:51 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/about_refactoring/</guid>
      <description>Никто не любит плохо написанные программные продукты. Огромное количество сильно связанного, ригидного кода из которого состоит большинство проектов. Особенно плачевная ситуация там, где мало внимания уделяется тестированию в пользу внедрения новых фич в результате чего накапливается технический долг. Часто в таких условиях тяжело себя мотивировать на изменение ситуации. Мне помогает подход пропагандируемый Бобом Мартином, который выражается в правиле бойскаута:
 Оставь место стоянки чище, чем оно было до твоего прихода.</description>
    </item>
    
    <item>
      <title>Установка Selenium Server на Ubuntu 16.04</title>
      <link>https://www.marinin.pw/post/selenium_ubuntu/</link>
      <pubDate>Sat, 01 Jul 2017 13:41:35 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/selenium_ubuntu/</guid>
      <description>Для разработки простых сайтов часто написание модульных и функциональных тестов становится излишним. Иногда нужно просто удостовериться, что с точки зрения конечного пользователя все работает корректно: кнопки кликаются, всплывающие окна появляются, индикаторы меняют состояние, клиентская валидация срабатывает как нужно, а скрипт не валится с ошибкой при отправке формы. Функциональные тесты такой уверенности не дают, так как не умеют тестировать js-код, а тестировать форму в сотый раз руками занятие неблагодарное (особенно когда у нас много важной клиентской логики).</description>
    </item>
    
    <item>
      <title>Редактирование кода в NetBeans</title>
      <link>https://www.marinin.pw/post/netbeans_hotkeys/</link>
      <pubDate>Tue, 23 May 2017 20:20:03 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/netbeans_hotkeys/</guid>
      <description>Обновлено 26.01.2018
NetBeans IDE мой основной рабочий инструмент. Ниже представлен список горячих клавиш, которые я использую наиболее часто, а так же дан поверхностный обзор шаблонов кода и макросов.
Горчие клавиши Навигация Alt+Up/Down &amp;mdash; следующая/предыдущая позиция установки курсора.
Alt+Left/Alt+Right/Ctrl+Q &amp;mdash; навигация по предыдущему/следующему редактированным фрагментам.
Ctrl+Q &amp;mdash; перейти к последнему отредактированному фрагменту.
Ctrl+Shift+1 &amp;mdash; найти текущий файл в дереве проектов и поставить на него фокус. Удобно чтобы не рыться долго в папках.</description>
    </item>
    
    <item>
      <title>Заработок и влияние для программиста</title>
      <link>https://www.marinin.pw/post/earnings_and_influence/</link>
      <pubDate>Sun, 21 May 2017 12:28:19 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/earnings_and_influence/</guid>
      <description>Программист создает новую информацию и получает за это деньги. Особенность труда программиста в том, что в идеале он пишет код один раз, а потом этот код работает годами и приносит ценность.
Плохая новость в том, что обычно на работе весь заработок программиста ограничивается зарплатой, хотя компания извлекает прибыль из его кода множество раз. Порой годами. Хорошая новость: никто не мешает программисту работать на себя и снимать все сливки. Очевидные варианты по созданию своей компании/стартапа я здесь не рассматриваю, а беру за основу факт наличия у программиста основной работы.</description>
    </item>
    
    <item>
      <title>Закончилось место на сервере</title>
      <link>https://www.marinin.pw/post/cannot-create-temp/</link>
      <pubDate>Sun, 16 Apr 2017 11:19:59 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/cannot-create-temp/</guid>
      <description>Начал замечать странности в поведении динамических сайтов на своем сервере. Залогинился и увидел, что перестало работать автодополнение команд. bash ругался таким текстом:
cannot create temp file for here-document: No space left on device
Первым делом решил посмотреть какие папки сколько места занимают. Перейдя в корневой раздел, выполнил:
$ sudo du -h --max-depth=1 ./  Папка tmp не разрослась и в целом все в пределах нормы.
В итоге выполнил
$ sudo apt-get autoremove -y  Оказалось, что лишних зависимостей в сумме набежало почти на гигабайт.</description>
    </item>
    
    <item>
      <title>Установка пустого пароля для root-пользователя в MySQL 5.7</title>
      <link>https://www.marinin.pw/post/mysql57-empty-root/</link>
      <pubDate>Thu, 02 Mar 2017 21:34:25 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/mysql57-empty-root/</guid>
      <description>Для локальной разработки с MySQL очень удобно использовать пустой пароль root-пользователя. Раньше его можно было задать пустым сразу при установке и спокойно работать. Начиная с версии MySQL 5.7 поведение изменилось.
Теперь, если при установке указывается пустой пароль пользователя root, то изменяется схема подключения для него с TCP/IP на локальный socket. Сделано это, как не трудно догадаться, в целях безопасности.
Выражается, например, в том, что команды вроде
$ mysql -uroot  отказываются работать.</description>
    </item>
    
    <item>
      <title>Русская раскладка в NetBeans под Ubuntu</title>
      <link>https://www.marinin.pw/post/ubuntu-netbeans/</link>
      <pubDate>Sun, 26 Feb 2017 12:45:41 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/ubuntu-netbeans/</guid>
      <description>В Ubuntu Linux есть старый баг, который не дает пользоваться горячими клавишами в некоторых приложениях, если используешь русскую раскладку. Для меня он особенно неприятен при работе с NetBeans.
На счастье, для ряда приложений на основе Java есть фикс.
На странице фикса не описан процесс установки для NetBeans. Восполню этот пробел и опишу процесс для версии NetBeans 8.2.
Шаг 1. Скачать фикс Тут ничего сложного. Идем на страницу фикса, скачиваем и распаковываем, например, в домашнюю папку.</description>
    </item>
    
    <item>
      <title>Неочевидные моменты при работе с assets в Yii2</title>
      <link>https://www.marinin.pw/post/yii2-assets/</link>
      <pubDate>Fri, 24 Feb 2017 15:29:39 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/yii2-assets/</guid>
      <description>Недавно пришлось настраивать сжатие ассетов Yii2 на одном из проектов. Для этого во фреймворке предусмотрен удобный cli-интерфейс. Работа с ним вкратце описана в документации.
Ниже перечислен ряд моментов, которые для меня оказались не очевидны.
Advanced-шаблон и алиас @app В проекте я использую advanced-шаблон. Он позволяет разделять проект на три части:
 Для пользователя (frontend) Для администраторов и контент-менеджеров (backend) Для работы с cli-интерфейсом приложения (console)  Для каждой из частей проекта так же предусмотрены алиасы @frontend, @backend и @console соответственно.</description>
    </item>
    
    <item>
      <title>Блог на Hugo за пару минут</title>
      <link>https://www.marinin.pw/post/hugo-blog/</link>
      <pubDate>Tue, 21 Feb 2017 15:29:39 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/hugo-blog/</guid>
      <description>Что и зачем Hugo - это генератор статических сайтов, написанный на языке Go.
Я нашел его чрезвычайно удобным для ведения собственного блога.
Для меня преимущества перед устаревшими системами вроде Wordpress очевидны:
 Низкие требования к хостингу (не нужен ни php, ни mysql) Безопасность Для написания постов не обязательно быть online Скорость работы Написание постов в разметке Markdown, а не html  Преимущества перед другими генераторами статических сайтов вроде Jekyll:</description>
    </item>
    
  </channel>
</rss>