<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>php on Илья Маринин</title>
    <link>https://www.marinin.pw/tags/php/</link>
    <description>Recent content in php on Илья Маринин</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <lastBuildDate>Sat, 21 Mar 2020 17:19:07 +0300</lastBuildDate>
    
	<atom:link href="https://www.marinin.pw/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Добавление новых php-расширений в Homestead</title>
      <link>https://www.marinin.pw/post/homestead_extend/</link>
      <pubDate>Sat, 21 Mar 2020 17:19:07 +0300</pubDate>
      
      <guid>https://www.marinin.pw/post/homestead_extend/</guid>
      <description>Homestead &amp;mdash; это набор конфигов от Laravel виртуальной машины на базе Vagrant.
Новичкам иногда сложно сходу добавить новый функционал в виртуальную машину на базе Homestead.
Для примера дан простой набор шагов по добавлению php-расширения APCu в Homestead. Оно используется, например, в Symfony.
Настраиваем Homestead Находим в папке с Homestead файл after.sh и добавляем нужные строки:
#Install APCu sudo apt-get -y \ -o Dpkg::Options::=&amp;quot;--force-confdef&amp;quot; \ -o Dpkg::Options::=&amp;quot;--force-confold&amp;quot; \ install php-apcu  Пересобираем виртуальную машину В терминале в папке с Homestead выполянем:</description>
    </item>
    
    <item>
      <title>Отладка кода в docker-контейнере из NetBeans</title>
      <link>https://www.marinin.pw/post/netbeans-docker-xdebug/</link>
      <pubDate>Sat, 27 Jan 2018 20:36:21 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/netbeans-docker-xdebug/</guid>
      <description>Я уже немного писал о NetBeans тут . Данная IDE умеет хорошо дружить с Xdebug, в связке с которым очень удобно отлаживать php-код. Основы успешно описаны, например, здесь.
Все интереснее, когда код приходится отлаживать не на локальной машине, а внутри docker-контейнера. Особенно, если нужно отладить cli-скрипт внутри контейнера.
Для успешной отладки следует:
 Настроить docker-контейнер с Xdebug внутри; Настроить Xdebug внутри контейнера; Настроить NetBeans.  При обычной отладке с использованием браузера и при отладке cli-скрипта настройки будут слегка отличаться.</description>
    </item>
    
    <item>
      <title>Реализация RESTful API в Yii2</title>
      <link>https://www.marinin.pw/post/yii2-rest/</link>
      <pubDate>Sun, 07 Jan 2018 15:40:09 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/yii2-rest/</guid>
      <description>Yii2 из коробки предоставляет удобный фреймворк для построения REST API вашего сервиса. Ниже я опишу как быстро начать его использовать.
Предварительная настройка Для начала работы достаточно базового шаблона Yii2. Создание проекта и настройку виртуального хоста я описывать не буду и перейду сразу к настройке REST.
После скачивания проекта настроим компоненту user в файле web.php. Добавим туда следующие строки:
&#39;enableSession&#39; =&amp;gt; false, &#39;loginUrl&#39; =&amp;gt; null,  Первая строка отключает сохранение состояния пользователя на сервере: одно из требований архитектуры REST.</description>
    </item>
    
    <item>
      <title>Основы PHP_CodeSniffer</title>
      <link>https://www.marinin.pw/post/php_code_sniffer/</link>
      <pubDate>Sat, 18 Nov 2017 20:59:11 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/php_code_sniffer/</guid>
      <description>В некоторых компаниях есть большая база долгоиграющих и постоянно изменяющихся проектов. Без неусыпного контроля база кода рискует превратиться в месиво из малочитаемых файлов. Вручную проверять код на соответствие стандартам занятие достаточно утомительное. Быстро появляется потребность в атоматизации процесса.
PHP_CodeSniffer - это инструмент для проверки кода на соответствие принятым соглашениям и (в некоторых случаях) автоматического его исправления после проверки.
Установка и запуск В самом простом случае можно выполнить такой код в папке с исходниками проекта:</description>
    </item>
    
    <item>
      <title>Неочевидные моменты при работе с assets в Yii2</title>
      <link>https://www.marinin.pw/post/yii2-assets/</link>
      <pubDate>Fri, 24 Feb 2017 15:29:39 +0500</pubDate>
      
      <guid>https://www.marinin.pw/post/yii2-assets/</guid>
      <description>Недавно пришлось настраивать сжатие ассетов Yii2 на одном из проектов. Для этого во фреймворке предусмотрен удобный cli-интерфейс. Работа с ним вкратце описана в документации.
Ниже перечислен ряд моментов, которые для меня оказались не очевидны.
Advanced-шаблон и алиас @app В проекте я использую advanced-шаблон. Он позволяет разделять проект на три части:
 Для пользователя (frontend) Для администраторов и контент-менеджеров (backend) Для работы с cli-интерфейсом приложения (console)  Для каждой из частей проекта так же предусмотрены алиасы @frontend, @backend и @console соответственно.</description>
    </item>
    
  </channel>
</rss>